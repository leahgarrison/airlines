{"ast":null,"code":"var _jsxFileName = \"/home/leah101/airlines/airlines_boilerplate/src/App.js\";\nimport React, { Component, useState } from 'react';\nimport './App.css';\nimport flightData from './data.js';\nimport FlightsTable from './components/FlightsTable';\nimport Select from './components/Select';\nconst {\n  routes,\n  getAirlineById,\n  getAirportByCode,\n  getAllAirlineNames,\n  getAllAirportNames,\n  getAirlineIDByName,\n  getAirportCodeByName\n} = flightData;\n\nconst App = () => {\n  const columns = [{\n    name: 'Airline',\n    property: 'airline'\n  }, {\n    name: 'Source Airport',\n    property: 'src'\n  }, {\n    name: 'Destination Airport',\n    property: 'dest'\n  }];\n  const [perPage, updatePerPage] = useState(25);\n  const [selectedAirline, updateSelectedAirline] = useState(null);\n  const [selectedAirport, updateSelectedAirport] = useState(null);\n  const [displayedRoutes, updateDisplayedRoutes] = useState(routes);\n  const allAirlines = getAllAirlineNames();\n  const allAirports = getAllAirportNames();\n\n  const filterRoutesByAirline = selectedAirline => {\n    if (selectedAirline !== null) {\n      let id = getAirlineIDByName(selectedAirline);\n      return displayedRoutes.filter(route => route.airline === id);\n    } else {\n      return displayedRoutes;\n    }\n  };\n\n  const filterRoutesByAirport = selectedAirport => {\n    if (selectedAirport !== null) {\n      let code = getAirportCodeByName(selectedAirport);\n      return displayedRoutes.filter(route => route.src === code || route.dest === code);\n    } else {\n      return displayedRoutes;\n    }\n  };\n\n  const getFilteredRoutes = (selectedAirline = null, selectedAirport = null) => {\n    if (selectedAirline === null && selectedAirline === null) return updateDisplayedRoutes(routes);\n    if (selectedAirline !== null) return updateDisplayedRoutes(filterRoutesByAirline(selectedAirline));\n    if (selectedAirport !== null) return updateDisplayedRoutes(filterRoutesByAirport(selectedAirport));\n  }; // format property; returns a string:\n  // we get the data from routes?\n  // we want to get the names\n  // we use this on the routes; to get the human data to show \n  // we pass this function, but it's scope allows us to access the data here\n  // so we will be passing the table a row of data to show\n  // table will be given row data; using formatValue to display it\n  // so the row data will be passed:\n  //  - row data will be passed \n  // property; \"src\": \"srcCode\"\n  // we pass the Table the routes as the row data?\n\n\n  function formatValue(property, value) {\n    if (property === 'airline') {\n      return getAirlineById(value).name;\n    } else if (property === 'src' || property === 'dest') {\n      return getAirportByCode(value).name;\n    }\n  }\n\n  function handleSelectedAirline(event) {\n    event.preventDefault();\n    let selection = event.target;\n    updateSelectedAirline(selection.value);\n    getFilteredRoutes(selection.value);\n  }\n\n  function handleSelectedAirport(event) {\n    event.preventDefault();\n    let selection = event.target;\n    updateSelectedAirport(selection.value);\n    getFilteredRoutes(selection.value);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"Airline Routes\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Welcome to the app!\"), /*#__PURE__*/React.createElement(Select, {\n    options: allAirlines,\n    valueKey: \"id\",\n    titleKey: \"name\",\n    allTitle: \"All Airlines\",\n    value: \"\",\n    onSelect: handleSelectedAirline,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    options: allAirports,\n    valueKey: \"id\",\n    titleKey: \"name\",\n    allTitle: \"All Airports\",\n    value: \"\",\n    onSelect: handleSelectedAirport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FlightsTable, {\n    className: \"routes-table\",\n    columns: columns,\n    rows: displayedRoutes,\n    format: formatValue,\n    perPage: perPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/leah101/airlines/airlines_boilerplate/src/App.js"],"names":["React","Component","useState","flightData","FlightsTable","Select","routes","getAirlineById","getAirportByCode","getAllAirlineNames","getAllAirportNames","getAirlineIDByName","getAirportCodeByName","App","columns","name","property","perPage","updatePerPage","selectedAirline","updateSelectedAirline","selectedAirport","updateSelectedAirport","displayedRoutes","updateDisplayedRoutes","allAirlines","allAirports","filterRoutesByAirline","id","filter","route","airline","filterRoutesByAirport","code","src","dest","getFilteredRoutes","formatValue","value","handleSelectedAirline","event","preventDefault","selection","target","handleSelectedAirport"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\nimport './App.css';\nimport flightData from './data.js'\nimport FlightsTable from './components/FlightsTable';\nimport Select from './components/Select'\n\nconst { routes, getAirlineById, getAirportByCode, getAllAirlineNames, getAllAirportNames, getAirlineIDByName, getAirportCodeByName, } = flightData;\nconst App = () => {\n  const columns = [\n    { name: 'Airline', property: 'airline' },\n    { name: 'Source Airport', property: 'src' },\n    { name: 'Destination Airport', property: 'dest' },\n  ];\n\n  const [perPage, updatePerPage] = useState(25);\n  const [selectedAirline, updateSelectedAirline] = useState(null)\n  const [selectedAirport, updateSelectedAirport] = useState(null)\n  const [displayedRoutes, updateDisplayedRoutes] = useState(routes)\n  const allAirlines = getAllAirlineNames()\n  const allAirports = getAllAirportNames()\n\n  const filterRoutesByAirline = (selectedAirline) => {\n    if (selectedAirline !== null) {\n      let id = getAirlineIDByName(selectedAirline)\n      return displayedRoutes.filter(route => route.airline === id)\n    } else {\n      return displayedRoutes\n    }\n  }\n\n  const filterRoutesByAirport = (selectedAirport) => {\n    if (selectedAirport !== null) {\n      let code = getAirportCodeByName(selectedAirport)\n      return displayedRoutes.filter(route => route.src === code || route.dest === code)\n    } else {\n      return displayedRoutes\n    }\n  }\n  const getFilteredRoutes = (selectedAirline = null, selectedAirport = null) => {\n    if (selectedAirline === null && selectedAirline === null) return updateDisplayedRoutes(routes)\n    if (selectedAirline !== null) return updateDisplayedRoutes(filterRoutesByAirline(selectedAirline))\n    if (selectedAirport !== null) return updateDisplayedRoutes(filterRoutesByAirport(selectedAirport))\n  }\n\n  // format property; returns a string:\n  // we get the data from routes?\n  // we want to get the names\n  // we use this on the routes; to get the human data to show \n  // we pass this function, but it's scope allows us to access the data here\n  // so we will be passing the table a row of data to show\n  // table will be given row data; using formatValue to display it\n  // so the row data will be passed:\n  //  - row data will be passed \n  // property; \"src\": \"srcCode\"\n  // we pass the Table the routes as the row data?\n  function formatValue(property, value) {\n    if (property === 'airline') {\n      return getAirlineById(value).name\n    } else if (property === 'src' || property === 'dest') {\n      return getAirportByCode(value).name\n    }\n  }\n\n  function handleSelectedAirline(event) {\n    event.preventDefault()\n    let selection = event.target\n    updateSelectedAirline(selection.value)\n    getFilteredRoutes(selection.value)\n  }\n\n  function handleSelectedAirport(event) {\n    event.preventDefault()\n    let selection = event.target\n    updateSelectedAirport(selection.value)\n    getFilteredRoutes(selection.value)\n  }\n\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <h1 className=\"title\">Airline Routes</h1>\n      </header>\n      <section>\n        <p>\n          Welcome to the app!\n        </p>\n        <Select\n          options={allAirlines} valueKey=\"id\" titleKey=\"name\"\n          allTitle=\"All Airlines\" value=\"\" onSelect={handleSelectedAirline}\n        />\n        <Select\n          options={allAirports} valueKey=\"id\" titleKey=\"name\"\n          allTitle=\"All Airports\" value=\"\" onSelect={handleSelectedAirport}\n        />\n        <FlightsTable className=\"routes-table\" columns={columns} rows={displayedRoutes} format={formatValue} perPage={perPage} />\n      </section>\n    </div>\n  )\n\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}