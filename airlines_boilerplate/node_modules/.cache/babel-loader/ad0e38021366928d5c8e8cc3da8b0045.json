{"ast":null,"code":"var _jsxFileName = \"/home/leah101/airlines/airlines_boilerplate/src/components/FlightsTable.js\";\nimport React, { Component, useState } from 'react';\nimport FlightsTableRow from './FlightsTableRow';\nimport Button from './Button'; // import { routes, airlines, airports } from '../data.js'\n\n/*\n- table needs to show:\n  - airline,\n  src\n  destination in a table\n*/\n\n/*\n  - perPage sets how many rows we show;\n    - what rows we should is ;\n      - next page:\n    - state should be used for numbers that can't be calculated\n      - keep track of the last page that we showed;\n      1-25 -> add perPage\n*/\n\nconst FlightsTable = ({\n  columns,\n  rows,\n  format,\n  perPage\n}) => {\n  // const [pageNumber, updatePageNumber] = useState(1)\n  const [lastRowIndex, updateLastRowIndex] = useState(perPage - 1);\n  const [startRowIndex, updateStartRowIndex] = useState(0);\n  let currentRows = rows.slice(lastRowIndex, perPage);\n\n  const showPreviousPage = event => {// let currentRows = rows.slice(0, 25)\n    // updateRows(currentRows)\n  };\n\n  const showNextPage = event => {\n    startRowIndex = perPage - lastRowIndex - 1;\n    currentRows = rows.slice(lastRowIndex + 1, lastRowIndex + perPage);\n    updateLastRowIndex(lastRowIndex + perPage - 1);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, columns.map((column, index) => {\n    return /*#__PURE__*/React.createElement(\"th\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, column.name);\n  }))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, currentRows.slice(lastRowIndex + 1, perPage).map((row, index) => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: index.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FlightsTableRow, {\n      row: row,\n      format: format,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }));\n  }))), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"Showing \", lastRowIndex + 1, \" - \", perPage, \" of \", rows.length, \" total routes.\"), /*#__PURE__*/React.createElement(Button, {\n    title: \"Previous Page\",\n    onClick: showPreviousPage,\n    disabled: lastRowIndex > 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    title: \"Next Page\",\n    onClick: showNextPage,\n    rows: rows,\n    disabled: lastRowIndex > 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FlightsTable;","map":{"version":3,"sources":["/home/leah101/airlines/airlines_boilerplate/src/components/FlightsTable.js"],"names":["React","Component","useState","FlightsTableRow","Button","FlightsTable","columns","rows","format","perPage","lastRowIndex","updateLastRowIndex","startRowIndex","updateStartRowIndex","currentRows","slice","showPreviousPage","event","showNextPage","map","column","index","name","row","toString","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,MAAjB;AAAyBC,EAAAA;AAAzB,CAAD,KAAwC;AAC3D;AACA,QAAM,CAACC,YAAD,EAAeC,kBAAf,IAAqCT,QAAQ,CAACO,OAAO,GAAG,CAAX,CAAnD;AACA,QAAM,CAACG,aAAD,EAAgBC,mBAAhB,IAAuCX,QAAQ,CAAC,CAAD,CAArD;AAEA,MAAIY,WAAW,GAAGP,IAAI,CAACQ,KAAL,CAAWL,YAAX,EAAyBD,OAAzB,CAAlB;;AACA,QAAMO,gBAAgB,GAAIC,KAAD,IAAW,CAClC;AACA;AAED,GAJD;;AAMA,QAAMC,YAAY,GAAID,KAAD,IAAW;AAC9BL,IAAAA,aAAa,GAAGH,OAAO,GAAGC,YAAV,GAAyB,CAAzC;AACAI,IAAAA,WAAW,GAAGP,IAAI,CAACQ,KAAL,CAAWL,YAAY,GAAG,CAA1B,EAA6BA,YAAY,GAAGD,OAA5C,CAAd;AACAE,IAAAA,kBAAkB,CAACD,YAAY,GAAGD,OAAf,GAAyB,CAA1B,CAAlB;AACD,GAJD;;AAMA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,OAAO,CAACa,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC9B,wBACE;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBD,MAAM,CAACE,IAAxB,CADF;AAGD,GAJA,CADH,CADF,CADF,eAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,WAAW,CAACC,KAAZ,CAAkBL,YAAY,GAAG,CAAjC,EAAoCD,OAApC,EAA6CU,GAA7C,CAAiD,CAACI,GAAD,EAAMF,KAAN,KAAgB;AAChE,wBACE;AAAI,MAAA,GAAG,EAAEA,KAAK,CAACG,QAAN,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,eAAD;AAAiB,MAAA,GAAG,EAAED,GAAtB;AAA2B,MAAA,MAAM,EAAEf,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD,GANA,CADH,CAZF,CADF,eAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYE,YAAY,GAAG,CAA3B,SAAiCD,OAAjC,UAA8CF,IAAI,CAACkB,MAAnD,mBAvBF,eAwBE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,eAAd;AAA8B,IAAA,OAAO,EAAET,gBAAvC;AAAyD,IAAA,QAAQ,EAAEN,YAAY,GAAG,CAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,eAyBE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,WAAd;AAA0B,IAAA,OAAO,EAAEQ,YAAnC;AAAiD,IAAA,IAAI,EAAEX,IAAvD;AAA6D,IAAA,QAAQ,EAAEG,YAAY,GAAG,CAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBF,CADF;AA8BD,CAhDD;;AAkDA,eAAeL,YAAf","sourcesContent":["import React, { Component, useState } from 'react';\nimport FlightsTableRow from './FlightsTableRow';\nimport Button from './Button';\n// import { routes, airlines, airports } from '../data.js'\n\n\n/*\n- table needs to show:\n  - airline,\n  src\n  destination in a table\n*/\n\n/*\n  - perPage sets how many rows we show;\n    - what rows we should is ;\n      - next page:\n    - state should be used for numbers that can't be calculated\n      - keep track of the last page that we showed;\n      1-25 -> add perPage\n*/\n\nconst FlightsTable = ({ columns, rows, format, perPage }) => {\n  // const [pageNumber, updatePageNumber] = useState(1)\n  const [lastRowIndex, updateLastRowIndex] = useState(perPage - 1)\n  const [startRowIndex, updateStartRowIndex] = useState(0)\n\n  let currentRows = rows.slice(lastRowIndex, perPage)\n  const showPreviousPage = (event) => {\n    // let currentRows = rows.slice(0, 25)\n    // updateRows(currentRows)\n\n  }\n\n  const showNextPage = (event) => {\n    startRowIndex = perPage - lastRowIndex - 1\n    currentRows = rows.slice(lastRowIndex + 1, lastRowIndex + perPage)\n    updateLastRowIndex(lastRowIndex + perPage - 1)\n  }\n\n  return (\n    <>\n      <table>\n        <thead>\n          <tr>\n            {columns.map((column, index) => {\n              return (\n                <th key={index}>{column.name}</th>\n              )\n            })\n            }\n          </tr>\n        </thead>\n\n        <tbody>\n          {currentRows.slice(lastRowIndex + 1, perPage).map((row, index) => {\n            return (\n              <tr key={index.toString()}>\n                <FlightsTableRow row={row} format={format} />\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <p>Showing {lastRowIndex + 1} - {perPage} of {rows.length} total routes.</p>\n      <Button title=\"Previous Page\" onClick={showPreviousPage} disabled={lastRowIndex > 1} />\n      <Button title=\"Next Page\" onClick={showNextPage} rows={rows} disabled={lastRowIndex > 1} />\n\n    </>\n  )\n}\n\nexport default FlightsTable"]},"metadata":{},"sourceType":"module"}