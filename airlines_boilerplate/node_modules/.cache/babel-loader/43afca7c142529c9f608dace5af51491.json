{"ast":null,"code":"var _jsxFileName = \"/home/leah101/airlines/airlines_boilerplate/src/App.js\";\nimport React, { Component, useState } from 'react';\nimport './App.css';\nimport flightData from './data.js';\nimport FlightsTable from './components/FlightsTable';\nconst {\n  routes,\n  getAirlineById,\n  getAirportByCode\n} = flightData;\n\nconst App = () => {\n  const columns = [{\n    name: 'Airline',\n    property: 'airline'\n  }, {\n    name: 'Source Airport',\n    property: 'src'\n  }, {\n    name: 'Destination Airport',\n    property: 'dest'\n  }];\n  const [perPage, updatePerPage] = useState(200); // format property; returns a string:\n  // we get the data from routes?\n  // we want to get the names\n  // we use this on the routes; to get the human data to show \n  // we pass this function, but it's scope allows us to access the data here\n  // so we will be passing the table a row of data to show\n  // table will be given row data; using formatValue to display it\n  // so the row data will be passed:\n  //  - row data will be passed \n  // property; \"src\": \"srcCode\"\n  // we pass the Table the routes as the row data?\n\n  function formatValue(property, value) {\n    if (property === 'airline') {\n      return getAirlineById(value).name;\n    } else if (property === 'src' || property === 'dest') {\n      return getAirportByCode(value).name;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"Airline Routes\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"Welcome to the app!\"), /*#__PURE__*/React.createElement(FlightsTable, {\n    className: \"routes-table\",\n    columns: columns,\n    rows: routes,\n    format: formatValue,\n    perPage: perPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/leah101/airlines/airlines_boilerplate/src/App.js"],"names":["React","Component","useState","flightData","FlightsTable","routes","getAirlineById","getAirportByCode","App","columns","name","property","perPage","updatePerPage","formatValue","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AAEA,MAAM;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,cAAV;AAA0BC,EAAAA;AAA1B,IAA+CJ,UAArD;;AACA,MAAMK,GAAG,GAAG,MAAM;AAChB,QAAMC,OAAO,GAAG,CACd;AAAEC,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA,QAAQ,EAAE;AAA7B,GADc,EAEd;AAAED,IAAAA,IAAI,EAAE,gBAAR;AAA0BC,IAAAA,QAAQ,EAAE;AAApC,GAFc,EAGd;AAAED,IAAAA,IAAI,EAAE,qBAAR;AAA+BC,IAAAA,QAAQ,EAAE;AAAzC,GAHc,CAAhB;AAMA,QAAM,CAACC,OAAD,EAAUC,aAAV,IAA2BX,QAAQ,CAAC,GAAD,CAAzC,CAPgB,CAUhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAASY,WAAT,CAAqBH,QAArB,EAA+BI,KAA/B,EAAsC;AACpC,QAAIJ,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,aAAOL,cAAc,CAACS,KAAD,CAAd,CAAsBL,IAA7B;AACD,KAFD,MAEO,IAAIC,QAAQ,KAAK,KAAb,IAAsBA,QAAQ,KAAK,MAAvC,EAA+C;AACpD,aAAOJ,gBAAgB,CAACQ,KAAD,CAAhB,CAAwBL,IAA/B;AACD;AACF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAIE,oBAAC,YAAD;AAAc,IAAA,SAAS,EAAC,cAAxB;AAAuC,IAAA,OAAO,EAAED,OAAhD;AAAyD,IAAA,IAAI,EAAEJ,MAA/D;AAAuE,IAAA,MAAM,EAAES,WAA/E;AAA4F,IAAA,OAAO,EAAEF,OAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAJF,CADF;AAeD,CA5CD;;AA8CA,eAAeJ,GAAf","sourcesContent":["import React, { Component, useState } from 'react';\nimport './App.css';\nimport flightData from './data.js'\nimport FlightsTable from './components/FlightsTable';\n\nconst { routes, getAirlineById, getAirportByCode } = flightData;\nconst App = () => {\n  const columns = [\n    { name: 'Airline', property: 'airline' },\n    { name: 'Source Airport', property: 'src' },\n    { name: 'Destination Airport', property: 'dest' },\n  ];\n\n  const [perPage, updatePerPage] = useState(200);\n\n\n  // format property; returns a string:\n  // we get the data from routes?\n  // we want to get the names\n  // we use this on the routes; to get the human data to show \n  // we pass this function, but it's scope allows us to access the data here\n  // so we will be passing the table a row of data to show\n  // table will be given row data; using formatValue to display it\n  // so the row data will be passed:\n  //  - row data will be passed \n  // property; \"src\": \"srcCode\"\n  // we pass the Table the routes as the row data?\n  function formatValue(property, value) {\n    if (property === 'airline') {\n      return getAirlineById(value).name\n    } else if (property === 'src' || property === 'dest') {\n      return getAirportByCode(value).name\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <h1 className=\"title\">Airline Routes</h1>\n      </header>\n      <section>\n        <p>\n          Welcome to the app!\n        </p>\n        <FlightsTable className=\"routes-table\" columns={columns} rows={routes} format={formatValue} perPage={perPage} />\n      </section>\n    </div>\n  )\n\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}